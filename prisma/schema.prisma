// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id       Int    @id @default(autoincrement())
  roleName String @unique @map("role_name")
  
  users User[]
  
  @@map("roles")
}

model User {
  id                 Int      @id @default(autoincrement())
  fullName           String   @map("full_name")
  email              String   @unique
  passwordHash       String   @map("password_hash")
  phoneNumber        String?  @unique @map("phone_number")
  address            String?
  profilePictureUrl  String?  @map("profile_picture_url")
  roleId             Int      @map("role_id")
  
  // Provider specific fields
  providerBio        String?  @map("provider_bio")
  verificationStatus ProviderVerificationStatus @default(PENDING) @map("verification_status")
  verifiedBy         Int?     @map("verified_by")
  verifiedAt         DateTime? @map("verified_at")
  
  // General fields
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  
  // Relations
  role               Role     @relation(fields: [roleId], references: [id])
  verifier           User?    @relation("UserVerifier", fields: [verifiedBy], references: [id])
  verifiedUsers      User[]   @relation("UserVerifier")
  
  // Provider relations
  providerServices   ProviderService[]
  providerPortfolios ProviderPortfolio[]
  providerCertifications ProviderCertification[]
  
  // Order relations
  customerOrders     Order[]  @relation("CustomerOrders")
  providerOrders     Order[]  @relation("ProviderOrders")
  
  // Review relations
  customerReviews    Review[] @relation("CustomerReviews")
  providerReviews    Review[] @relation("ProviderReviews")
  
  @@map("users")
}

model ServiceCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  iconUrl     String?  @map("icon_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  providerServices ProviderService[]
  
  @@map("service_categories")
}

model ProviderService {
  id          Int      @id @default(autoincrement())
  providerId  Int      @map("provider_id")
  categoryId  Int      @map("category_id")
  serviceTitle String  @map("service_title")
  description String?
  price       Float
  priceUnit   String   @default("per project") @map("price_unit")
  isAvailable Boolean  @default(true) @map("is_available")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  provider    User     @relation(fields: [providerId], references: [id])
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  orders      Order[]
  
  @@unique([providerId, categoryId])
  @@map("provider_services")
}

model ProviderPortfolio {
  id           Int      @id @default(autoincrement())
  providerId   Int      @map("provider_id")
  projectTitle String   @map("project_title")
  description  String?
  imageUrl     String?  @map("image_url")
  completedAt  DateTime? @map("completed_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  provider     User     @relation(fields: [providerId], references: [id])
  
  @@map("provider_portfolios")
}

model ProviderCertification {
  id                   Int      @id @default(autoincrement())
  providerId           Int      @map("provider_id")
  certificateName      String   @map("certificate_name")
  issuingOrganization  String?  @map("issuing_organization")
  credentialId         String?  @map("credential_id")
  fileUrl              String?  @map("file_url")
  issuedAt             DateTime? @map("issued_at")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  
  provider             User     @relation(fields: [providerId], references: [id])
  
  @@map("provider_certifications")
}

model Order {
  id                    Int      @id @default(autoincrement())
  customerId            Int      @map("customer_id")
  providerId            Int      @map("provider_id")
  providerServiceId     Int      @map("provider_service_id")
  orderDate             DateTime @default(now()) @map("order_date")
  scheduledDate         DateTime @map("scheduled_date")
  jobAddress            String   @map("job_address")
  district              String
  subDistrict           String   @map("sub_district")
  ward                  String
  jobDescriptionNotes   String?  @map("job_description_notes")
  totalAmount           Float    @map("total_amount")
  status                OrderStatus @default(PENDING_ACCEPTANCE)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  customer              User     @relation("CustomerOrders", fields: [customerId], references: [id])
  provider              User     @relation("ProviderOrders", fields: [providerId], references: [id])
  providerService       ProviderService @relation(fields: [providerServiceId], references: [id])
  payment               Payment?
  review                Review?
  
  @@map("orders")
}

model Payment {
  id                    Int      @id @default(autoincrement())
  orderId               Int      @unique @map("order_id")
  paymentGateway        String   @default("Midtrans") @map("payment_gateway")
  gatewayTransactionId  String?  @unique @map("gateway_transaction_id")
  amount                Float
  status                PaymentStatus @default(PENDING)
  paymentMethod         String?  @map("payment_method")
  paidAt                DateTime? @map("paid_at")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  order                 Order    @relation(fields: [orderId], references: [id])
  
  @@map("payments")
}

model Review {
  id         Int      @id @default(autoincrement())
  orderId    Int      @unique @map("order_id")
  customerId Int      @map("customer_id")
  providerId Int      @map("provider_id")
  rating     Int
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  order      Order    @relation(fields: [orderId], references: [id])
  customer   User     @relation("CustomerReviews", fields: [customerId], references: [id])
  provider   User     @relation("ProviderReviews", fields: [providerId], references: [id])
  
  @@map("reviews")
}

enum ProviderVerificationStatus {
  PENDING @map("pending")
  VERIFIED @map("verified")
  REJECTED @map("rejected")
  NEEDS_RESUBMISSION @map("needs_resubmission")
  
  @@map("provider_verification_status")
}

enum OrderStatus {
  PENDING_ACCEPTANCE @map("pending_acceptance")
  ACCEPTED @map("accepted")
  REJECTED_BY_PROVIDER @map("rejected_by_provider")
  IN_PROGRESS @map("in_progress")
  COMPLETED @map("completed")
  CANCELLED_BY_CUSTOMER @map("cancelled_by_customer")
  DISPUTED @map("disputed")
  
  @@map("order_status")
}

enum PaymentStatus {
  PENDING @map("pending")
  SUCCESS @map("success")
  FAILED @map("failed")
  EXPIRED @map("expired")
  REFUNDED @map("refunded")
  
  @@map("payment_status")
}
